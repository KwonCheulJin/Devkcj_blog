{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/CleanCode-8/",
    "result": {"data":{"cur":{"id":"fcb333a2-a4f1-5de5-a3e1-d4e32a67255b","html":"<h1 id=\"chapter-8---단위-테스트\" style=\"position:relative;\"><a href=\"#chapter-8---%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"chapter 8   단위 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 8 - 단위 테스트</h1>\n<h2 id=\"01-테스트-코드의-중요성\" style=\"position:relative;\"><a href=\"#01-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"01 테스트 코드의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 테스트 코드의 중요성</h2>\n<ol>\n<li>테스트 코드는 실수를 바로잡아준다.</li>\n<li>테스트 코드는 반드시 존재해야하며, 실제 코드 못지않게 중요하다.</li>\n<li>테스트 케이스는 변경이 쉽도록 한다. 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트다. 테스트 케이스가 있으면 변경이 두렵지않다. 테스트 케이스가 없다면 모든 변경이 잠정적인 버그다. 테스트 커버리지가 높을수록 버드게 대한 콩보가 줄어든다.</li>\n<li>지저분한 테스트 코드는 테스트를 안하니만 못하다.</li>\n</ol>\n<h3 id=\"effective-unit-test-테스트의-중요성\" style=\"position:relative;\"><a href=\"#effective-unit-test-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"effective unit test 테스트의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;Effective Unit Test> 테스트의 중요성</h3>\n<blockquote>\n<p>테스트는 실사용에 적합한 설계를 끌어내준다. <br>\n테스트를 작성해서 얻게 되는 가장 큰 수확은 테스트 자체가 아니다. 작성 과정에서 얻는 깨달음이다.</p>\n</blockquote>\n<h3 id=\"테스트는-자동화되어야-한다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%98%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"테스트는 자동화되어야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트는 자동화되어야 한다.</h3>\n<h2 id=\"02-테스트의-종류\" style=\"position:relative;\"><a href=\"#02-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"02 테스트의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. 테스트의 종류</h2>\n<h3 id=\"test-pyramid\" style=\"position:relative;\"><a href=\"#test-pyramid\" aria-label=\"test pyramid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Pyramid</h3>\n<ul>\n<li>\n<p>Unit Test: 프로그램 내부의 개별 컴포넌트의 동작을 테스트한다. 배포하기 전에 자동으로 실행되도록 많이 사용한다.</p>\n</li>\n<li>\n<p>Integration Test: 프로그램 내부의 개별 컴포넌트들을 합쳐서 동작을 테스트한다. Unit Test는 각 컴포넌트를 고립시켜 테스트 하기 때문에 컴포넌트의 interaction을 확인하는 Integration Test가 필요하다.</p>\n</li>\n<li>\n<p>E2E Test: End to End Test. 실제 유저의 시나리오대로 네트워크를 통해 서버의 Endpoint를 호출해 테스트한다.</p>\n</li>\n</ul>\n<h2 id=\"03-unit-test-작성\" style=\"position:relative;\"><a href=\"#03-unit-test-%EC%9E%91%EC%84%B1\" aria-label=\"03 unit test 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. Unit Test 작성</h2>\n<h3 id=\"테스트-라이브러리를-사용하자\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"테스트 라이브러리를 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 라이브러리를 사용하자.</h3>\n<ul>\n<li><a href=\"https://junit.org/junit5/\">JUnit</a>:forunittest</li>\n<li><a href=\"https://site.mockito.org/\">Mockito</a>:formockingdependencies</li>\n<li><a href=\"http://wiremock.org/\">Wiremock</a>:forstubbingoutexternalservices</li>\n<li><a href=\"https://docs.pact.io/\">Pact</a>:forwritingCDCtests</li>\n<li><a href=\"https://www.selenium.dev/\">Selenium</a>:forwritingUI-drivenend-to-endtests</li>\n<li><a href=\"https://github.com/rest-assured/rest-assured\">REST-assured</a>:forwritingRESTAPI-drivenend-to-endtests</li>\n</ul>\n<h3 id=\"test-double\" style=\"position:relative;\"><a href=\"#test-double\" aria-label=\"test double permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Double</h3>\n<ul>\n<li>테스트에서 원본 객체를 대신하는 객체</li>\n</ul>\n<h4 id=\"stub\" style=\"position:relative;\"><a href=\"#stub\" aria-label=\"stub permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stub</h4>\n<ul>\n<li>\n<p>원래의 구현을 최대한 단순한 것으로 대체한다.</p>\n</li>\n<li>\n<p>테스트를 위해 프로그래밍된 항목에만 응답한다.</p>\n</li>\n</ul>\n<h4 id=\"spy\" style=\"position:relative;\"><a href=\"#spy\" aria-label=\"spy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spy</h4>\n<ul>\n<li>\n<p>Stub의 역할을 하면서 호출에 대한 정보를 기록한다.</p>\n</li>\n<li>\n<p>이메일 서비스에서 메시지가 몇 번 전송되었는지 확인할 때</p>\n</li>\n</ul>\n<h4 id=\"mock\" style=\"position:relative;\"><a href=\"#mock\" aria-label=\"mock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock</h4>\n<ul>\n<li>\n<p>행위를 검증하기 위해 가짜 객체를 만들어 테스트하는 방법</p>\n</li>\n<li>\n<p>호출에 대한 동작을 프로그래밍할 수 있다.</p>\n</li>\n<li>\n<p>Stub은 상태를 검증하고 Mock은 행위를 검증한다.</p>\n</li>\n</ul>\n<h3 id=\"given-when-then-패턴을-사용하자\" style=\"position:relative;\"><a href=\"#given-when-then-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"given when then 패턴을 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>given-when-then 패턴을 사용하자</h3>\n<ul>\n<li>\n<p>given : 테스트에 대한 pre-condition</p>\n</li>\n<li>\n<p>when : 테스트하고 싶은 동작 호출</p>\n</li>\n<li>\n<p>then : 테스트 결과 확인</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetPageHierarchyAsXml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">givenPages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PageOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PageOne.ChildOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PageTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">whenRequestIsIssued</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type:pages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">thenResponseShouldBeXml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetPageHierarchyHasRightTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">givenPages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PageOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PageOne.ChildOne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PageTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">whenRequestIsIssued</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type:pages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">thenResponseShouldContain</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"&lt;name>PageOne&lt;/name>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;name>PageTwo&lt;/name>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;name>ChildOne&lt;/name>\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"spring-boot-application-test-예제\" style=\"position:relative;\"><a href=\"#spring-boot-application-test-%EC%98%88%EC%A0%9C\" aria-label=\"spring boot application test 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot Application Test 예제</h3>\n<p>Code from - <a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">https://martinfowler.com/articles/practical-test-pyramid.html</a></p>\n<h4 id=\"examplecontroller---main-code\" style=\"position:relative;\"><a href=\"#examplecontroller---main-code\" aria-label=\"examplecontroller   main code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ExampleController - main Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PersonRepository</span> personRepo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExampleController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">PersonRepository</span> personRepo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>personRepo <span class=\"token operator\">=</span> personRepo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello/{lastName}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> foundPerson <span class=\"token operator\">=</span> personRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findByLastName</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> foundPerson\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello %s %s!\"</span><span class=\"token punctuation\">,</span>\n                        person<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        person<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Who is this '%s' you're talking about?\"</span><span class=\"token punctuation\">,</span>\n                        lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"examplecontroller---unit-test\" style=\"position:relative;\"><a href=\"#examplecontroller---unit-test\" aria-label=\"examplecontroller   unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ExampleController - Unit Test</h4>\n<ul>\n<li>PersonRepository Mock 사용</li>\n<li>given-when-then 구조</li>\n<li>repository에서 값을 읽어왔을 때와 읽어오지 못했을 때 2가지 경우를 테스트</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExampleController</span> subject<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Mock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PersonRepository</span> personRepo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">initMocks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleController</span><span class=\"token punctuation\">(</span>personRepo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shouldReturnFullNameOfAPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> peter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>personRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findByLastName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>peter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Peter Pan!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shouldTellIfPersonIsUnknown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>personRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findByLastName</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Who is this 'Pan' you're talking about?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"integration-testdatabase\" style=\"position:relative;\"><a href=\"#integration-testdatabase\" aria-label=\"integration testdatabase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration Test(Database)</h4>\n<ul>\n<li>PersonRepository이 데이터 베이스와 연결될 수 있는지 확인</li>\n<li>in-memory DB인 h2로 테스트</li>\n<li>findByLastName가 정상적으로 동작하는지 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonRepositoryIntegrationTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PersonRepository</span> subject<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@After</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        subject<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shouldSaveAndFetchPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> peter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>peter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> maybePeter <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">findByLastName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>maybePeter<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>peter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"integration-testservice\" style=\"position:relative;\"><a href=\"#integration-testservice\" aria-label=\"integration testservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration Test(Service)</h4>\n<ul>\n<li>WireMock을 이용해 mock 서버를 띄운다.</li>\n<li>client가 실제 서버가 아닌 mock 서버로 요청하게 해서 client의 동작을 테스트한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherClientIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WeatherClient</span> subject<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Rule</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WireMockRule</span> wireMockRule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WireMockRule</span><span class=\"token punctuation\">(</span><span class=\"token number\">8089</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shouldCallWeatherService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//given</span>\n        wireMockRule<span class=\"token punctuation\">.</span><span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlPathEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/some-test-api-key/53.5511,9.9937\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:weatherApiResponse.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//when</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WeatherResponse</span><span class=\"token punctuation\">></span></span> weatherResponse <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">.</span><span class=\"token function\">fetchWeather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//then</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WeatherResponse</span><span class=\"token punctuation\">></span></span> expectedResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">WeatherResponse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>weatherResponse<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>expectedResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"04-first-원칙\" style=\"position:relative;\"><a href=\"#04-first-%EC%9B%90%EC%B9%99\" aria-label=\"04 first 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. FIRST 원칙</h2>\n<h4 id=\"ffast-빠르게\" style=\"position:relative;\"><a href=\"#ffast-%EB%B9%A0%EB%A5%B4%EA%B2%8C\" aria-label=\"ffast 빠르게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>F(Fast): 빠르게</h4>\n<ul>\n<li>테스트는 빨리 돌아야 한다. 자주 돌려야 하기 때문이다.</li>\n</ul>\n<h4 id=\"iindependent-독립적으로\" style=\"position:relative;\"><a href=\"#iindependent-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C\" aria-label=\"iindependent 독립적으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I(Independent): 독립적으로</h4>\n<ul>\n<li>각 테스트를 독립적으로 작성한다. 서로에게 의존하면 실패한 원인을 찾기 어려워진다.(다른 테스트의 실패로 인한건지, 코드 오류인지)</li>\n</ul>\n<h4 id=\"rrepeatable-반복가능하게\" style=\"position:relative;\"><a href=\"#rrepeatable-%EB%B0%98%EB%B3%B5%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C\" aria-label=\"rrepeatable 반복가능하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>R(Repeatable): 반복가능하게</h4>\n<ul>\n<li>테스트는 어떤 환경에서도 반복가능해야 한다. 실제 환경, QA환경, 모든 환경에서 돌아가야 한다.</li>\n</ul>\n<h4 id=\"sself-validating-자가검증하는\" style=\"position:relative;\"><a href=\"#sself-validating-%EC%9E%90%EA%B0%80%EA%B2%80%EC%A6%9D%ED%95%98%EB%8A%94\" aria-label=\"sself validating 자가검증하는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S(Self-Validating): 자가검증하는</h4>\n<ul>\n<li>테스트는 bool값으로 결과를 내야 한다.</li>\n</ul>\n<h4 id=\"ttimely-적시에\" style=\"position:relative;\"><a href=\"#ttimely-%EC%A0%81%EC%8B%9C%EC%97%90\" aria-label=\"ttimely 적시에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>T(Timely): 적시에</h4>\n<ul>\n<li>테스트 하려는 실제 코드를 구현하기 직전에 구현한다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#01-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\">01. 테스트 코드의 중요성</a></p>\n<ul>\n<li><a href=\"#effective-unit-test-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\">&#x3C;Effective Unit Test> 테스트의 중요성</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%98%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">테스트는 자동화되어야 한다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#02-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A2%85%EB%A5%98\">02. 테스트의 종류</a></p>\n<ul>\n<li><a href=\"#test-pyramid\">Test Pyramid</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#03-unit-test-%EC%9E%91%EC%84%B1\">03. Unit Test 작성</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\">테스트 라이브러리를 사용하자.</a></p>\n</li>\n<li>\n<p><a href=\"#test-double\">Test Double</a></p>\n<ul>\n<li><a href=\"#stub\">Stub</a></li>\n<li><a href=\"#spy\">Spy</a></li>\n<li><a href=\"#mock\">Mock</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#given-when-then-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\">given-when-then 패턴을 사용하자</a></p>\n</li>\n<li>\n<p><a href=\"#spring-boot-application-test-%EC%98%88%EC%A0%9C\">Spring Boot Application Test 예제</a></p>\n<ul>\n<li><a href=\"#examplecontroller---main-code\">ExampleController - main Code</a></li>\n<li><a href=\"#examplecontroller---unit-test\">ExampleController - Unit Test</a></li>\n<li><a href=\"#integration-testdatabase\">Integration Test(Database)</a></li>\n<li><a href=\"#integration-testservice\">Integration Test(Service)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#04-first-%EC%9B%90%EC%B9%99\">04. FIRST 원칙</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#ffast-%EB%B9%A0%EB%A5%B4%EA%B2%8C\">F(Fast): 빠르게</a></li>\n<li><a href=\"#iindependent-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C\">I(Independent): 독립적으로</a></li>\n<li><a href=\"#rrepeatable-%EB%B0%98%EB%B3%B5%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C\">R(Repeatable): 반복가능하게</a></li>\n<li><a href=\"#sself-validating-%EC%9E%90%EA%B0%80%EA%B2%80%EC%A6%9D%ED%95%98%EB%8A%94\">S(Self-Validating): 자가검증하는</a></li>\n<li><a href=\"#ttimely-%EC%A0%81%EC%8B%9C%EC%97%90\">T(Timely): 적시에</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Chapter 8 - 단위 테스트 01. 테스트 코드의 중요성 테스트 코드는 실수를 바로잡아준다. 테스트 코드는 반드시 존재해야하며, 실제 코드 못지않게 중요하다. 테스트 케이스는 변경이 쉽도록 한다. 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트다. 테스트 케이스가 있으면 변경이 두렵지않다. 테스트 케이스가 없다면 모든 변경이 잠정적인 버그다. 테스트 커버리지가 높을수록 버드게 대한 콩보가 줄어든다. 지저분한 테스트 코드는 테스트를 안하니만 못하다. <Effective Unit Test> 테스트의 중요성 테스트는 실사용에 적합한 설계를 끌어내준다. \n테스트를 작성해서 얻게 되는 가장 큰 수확은 테스트 자체가 아니다. 작성 과정에서 얻는 깨달음이다. 테스트는 자동화되어야 한다. 02. 테스트의 종류 Test Pyramid Unit Test: 프로그램 내부의 개별 컴포넌트의 동작을 테스트한다. 배포하기 전에 자동으로 실행되도록 많이 사용한다. Integra…","frontmatter":{"date":"January 15, 2022","title":"제로베이스-한달한권 클린코드(Chapter.9)","categories":"CleanCode","author":"촬스","emoji":"👍"},"fields":{"slug":"/CleanCode-8/"}},"next":{"id":"30ed3f42-c8d8-5bd5-9e2f-5e3a1ec41c0e","html":"<h1 id=\"chapter-8---경계\" style=\"position:relative;\"><a href=\"#chapter-8---%EA%B2%BD%EA%B3%84\" aria-label=\"chapter 8   경계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 8 - 경계</h1>\n<h2 id=\"01-경계란---우리코드와-외부코드-사이\" style=\"position:relative;\"><a href=\"#01-%EA%B2%BD%EA%B3%84%EB%9E%80---%EC%9A%B0%EB%A6%AC%EC%BD%94%EB%93%9C%EC%99%80-%EC%99%B8%EB%B6%80%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9D%B4\" aria-label=\"01 경계란   우리코드와 외부코드 사이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 경계란 - 우리코드와 외부코드 사이</h2>\n<ul>\n<li>오픈소스, 라이브러리를 안쓰는 프로젝트는 없다.</li>\n<li>우리가 만든 코드에 외부에서 들어온 코드를 병합해야 한다.</li>\n<li>외부 코드는 외부에서 만든 코드인데, 외부 시스템과 호출하거나 단순히 외부에서 만들어진 코드일 수 있다.</li>\n<li>우리 코드와 외부 코드를 깔끔하게 통합시키기 위해 경계를 잘 지어야한다.</li>\n</ul>\n<h2 id=\"02-경계-짓기-1-우리-코드를-보호하기\" style=\"position:relative;\"><a href=\"#02-%EA%B2%BD%EA%B3%84-%EC%A7%93%EA%B8%B0-1-%EC%9A%B0%EB%A6%AC-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B3%B4%ED%98%B8%ED%95%98%EA%B8%B0\" aria-label=\"02 경계 짓기 1 우리 코드를 보호하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. 경계 짓기 (1) 우리 코드를 보호하기</h2>\n<h3 id=\"캡슐화encapsulation\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94encapsulation\" aria-label=\"캡슐화encapsulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화(Encapsulation)</h3>\n<ul>\n<li>객체의 실제 구현을 외부로 부터 감추는 방식</li>\n</ul>\n<h3 id=\"sensor라는-값을-관리해야-하는-상황sensor는-외부에서-사용된다\" style=\"position:relative;\"><a href=\"#sensor%EB%9D%BC%EB%8A%94-%EA%B0%92%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9sensor%EB%8A%94-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%EB%90%9C%EB%8B%A4\" aria-label=\"sensor라는 값을 관리해야 하는 상황sensor는 외부에서 사용된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sensor라는 값을 관리해야 하는 상황(Sensor는 외부에서 사용된다.)</h3>\n<ul>\n<li>Sensor Id와 Sensor 객체로 저장하고 싶어서, Map을 사용한다.</li>\n<li>하지만 Map을 그대로 사용하면 Map이 가진 clear() 및 다른 불필요한 메서드가 외부로 노출되어서 누군가 사용 할 수 있다.</li>\n<li>Sensor의 ‘외부’코드의 관점에서 Sensor 객체의 값들만 가져오도록 하기 위해서 캡슐화를 진행한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span> sensors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Sensor</span> s <span class=\"token operator\">=</span> sensors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sensorId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위처럼 Map을 직접 사용하게 되면 Map 인터페이스가 제공하는 clear 등 불필요한 기능이 노출된다.</li>\n<li>외부 코드가 함부로 호출하면 sensor 데이터가 손상될 수 있고, 이는 우리 의도와 벗어난다.</li>\n</ul>\n<h3 style=\"text-align: center;\"> ⬇️ </h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sensor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span> sensors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sensor</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sensorId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sensors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sensorId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>캡슐화를 통해서 Map을 감춘다.</li>\n<li>원하는 기능만 제공하도록 한다.</li>\n<li>적절한 경계로 우리 코드를 보호할 수 있다.</li>\n</ul>\n<h2 id=\"03-경계-짓기-2-외부-코드와-호환하기\" style=\"position:relative;\"><a href=\"#03-%EA%B2%BD%EA%B3%84-%EC%A7%93%EA%B8%B0-2-%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C%EC%99%80-%ED%98%B8%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"03 경계 짓기 2 외부 코드와 호환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 경계 짓기 (2) 외부 코드와 호환하기</h2>\n<ul>\n<li>외부 코드를 호출할 때 우리가 원하는 방식으로 사용하고 싶다면 adapter 패턴을 사용한다.</li>\n</ul>\n<h2 id=\"04-외부-라이브러리-테스트하기---learning-test\" style=\"position:relative;\"><a href=\"#04-%EC%99%B8%EB%B6%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---learning-test\" aria-label=\"04 외부 라이브러리 테스트하기   learning test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. 외부 라이브러리 테스트하기 - Learning Test</h2>\n<h3 id=\"learning-test를-작성해-라이브러리를-테스트-한다\" style=\"position:relative;\"><a href=\"#learning-test%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%9C%EB%8B%A4\" aria-label=\"learning test를 작성해 라이브러리를 테스트 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learning Test를 작성해 라이브러리를 테스트 한다.</h3>\n<ul>\n<li>외부 코드를 배우고, 안정성도 미리 검증 할 수 있다.\n<ul>\n<li>학습 테스트는 이해도를 높인다.</li>\n<li>외부 코드의 버전이 변경됐을 때, 우리 코드와 호환되는 지 확인할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#01-%EA%B2%BD%EA%B3%84%EB%9E%80---%EC%9A%B0%EB%A6%AC%EC%BD%94%EB%93%9C%EC%99%80-%EC%99%B8%EB%B6%80%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9D%B4\">01. 경계란 - 우리코드와 외부코드 사이</a></p>\n</li>\n<li>\n<p><a href=\"#02-%EA%B2%BD%EA%B3%84-%EC%A7%93%EA%B8%B0-1-%EC%9A%B0%EB%A6%AC-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B3%B4%ED%98%B8%ED%95%98%EA%B8%B0\">02. 경계 짓기 (1) 우리 코드를 보호하기</a></p>\n<ul>\n<li><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94encapsulation\">캡슐화(Encapsulation)</a></li>\n<li><a href=\"#sensor%EB%9D%BC%EB%8A%94-%EA%B0%92%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9sensor%EB%8A%94-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%EB%90%9C%EB%8B%A4\">Sensor라는 값을 관리해야 하는 상황(Sensor는 외부에서 사용된다.)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#03-%EA%B2%BD%EA%B3%84-%EC%A7%93%EA%B8%B0-2-%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C%EC%99%80-%ED%98%B8%ED%99%98%ED%95%98%EA%B8%B0\">03. 경계 짓기 (2) 외부 코드와 호환하기</a></p>\n</li>\n<li>\n<p><a href=\"#04-%EC%99%B8%EB%B6%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0---learning-test\">04. 외부 라이브러리 테스트하기 - Learning Test</a></p>\n<ul>\n<li><a href=\"#learning-test%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%9C%EB%8B%A4\">Learning Test를 작성해 라이브러리를 테스트 한다.</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 13, 2022","title":"제로베이스-한달한권 클린코드(Chapter.8)","categories":"CleanCode","author":"촬스","emoji":"👍"},"fields":{"slug":"/CleanCode-7/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.devkcj.com","comments":{"utterances":{"repo":"/KwonCheulJin/Devkcj_blog"}}}}},"pageContext":{"slug":"/CleanCode-8/","nextSlug":"/CleanCode-7/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}