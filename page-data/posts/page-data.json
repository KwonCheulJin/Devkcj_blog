{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"b0544ef1-5214-547b-8665-8bd79f55b79e","excerpt":"Chapter 6 - 객체와 자료구조로 데이터 표현하기 01. 자료구조 vs 객체 자료구조(Data Structure) 객체(Object) 데이터 그 자체 비즈니스 로직 자료를 공개한다. 자료를 숨기고, 추상화 한다.자료를 다루는 함수만 공개한다. 변수 사이에 조회 함수와 설정 함수로  변수를 다룬다고 객체가 되지 않는다.  (getter, setter) 추상 인터페이스를 제공해 사용자가 구현을 모른 채  자료의 핵심을 조작할 수 있다. 자료구조 vs 객체 예시(1) Vehicle 위와 같이 특별하게 비즈니스 로직이 들어가 있지 않고 단순히 값을 반환하는 경우에는 객체가 아니고 자료구조라고 할 수 있다. 자료구조 vs 객체 예시(2) Shape 절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 자료 구조가 추가되면 함수를 고쳐야 한다. 객체지향 코드는 새로운 클래스를 추가하기 쉽다. 하지만 Shape에 함수가 추가 된다면 모든 클래스에 추가 된 함수를 모두 추가 해줘야 하는 단…","fields":{"slug":"/CleanCode-5/"},"frontmatter":{"categories":"CleanCode","title":"제로베이스-한달한권 클린코드(Chapter.6)","date":"January 09, 2022"}},"next":{"fields":{"slug":"/CleanCode-4/"}},"previous":null},{"node":{"id":"75c2b04b-3fe5-5877-a79b-c2911aeb94e2","excerpt":"Chapter 5 - 형식 맞추기 코드의 가독성에 필수적인 포멧팅 01. 포맷팅이 중요한 이유 위와 같이 형식이 맞춰져 있지 않은 코드를 보면 코드를 이해하기 난해한 경우가 생긴다. 위의 예제는 단순하지만 엄청 긴 문장의 매서드라면 어떨까? 가독성을 좋게 하기 위해서 포맷팅이 중요하다. 코드를 수월하게 읽어나갈 수 있다. 아마추어처럼 보이지 않는다. 포맷팅으로 인해 코드를 잘못해석해 버그를 발생할 위험을 줄인다. 02. 클린코드 포맷팅 적절한 길이 유지하는게 좋다. 200라인에서 500라인 이하로 유지하는게 좋다. 코드 길이를 200줄 정도로 제한하는 것은 반드시 지킬 엄격한 규칙은 아니지만, 일반적으로 큰 파일 보다는 작은 파일이 이해하기 쉽다. 현업에서는 대부분의 코드들도 200라인 정도를 유지한다고 한다. 코드 길이가 200라인을 넘어간다면, 클래스가 여러 개의 일을 하고 있을 수 있다. SRP(Single Responbility Principle - 단일 책임 원칙)위배 했…","fields":{"slug":"/CleanCode-4/"},"frontmatter":{"categories":"CleanCode","title":"제로베이스-한달한권 클린코드(Chapter.5)","date":"January 08, 2022"}},"next":{"fields":{"slug":"/CleanCode-3/"}},"previous":{"fields":{"slug":"/CleanCode-5/"}}},{"node":{"id":"564969c3-ebe2-5296-803f-5ef9e2525488","excerpt":"Chapter 4 - 주석 01. 주석을 최대한 쓰지 말자 주석은 나쁜 코드를 보완하지 못한다. 코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다. 자신이 저지른 난장판을 주석으로 설명하지 말고 개선하는 데 시간을 보내야 한다. 코드로도 의도 표현이 가능하다! 주석은 방치된다. 코드의 변화에 따라가지 못하고, 주석은 방치된다. 코드는 컴파일되어 호출되지만, 주석은 그저 주석이기 때문에 그 자리에 방치되고 결국 의미없는 텍스트가 되어버린다. 복지 혜택에 연금 혜택 기준 기능이 추가된다면 주석은 변화에 따라가지 못한다. 02. 좋은 주석 구현에 대한 정보를 제공한다. 의도와 중요성을 설명하는 주석 TODO, FIXME 주석  TODO: 앞으로 할 일. 지금은 해결하지 않지만 나중에 해야할 일을 미리 적어둘 때. FIXME: 문제가 있찌만, 당장 수정할 필요는 없을 때. 가능하면 빨리 수정하는게 좋다.  03. 주석보다 annotation java.lang.annota…","fields":{"slug":"/CleanCode-3/"},"frontmatter":{"categories":"CleanCode","title":"제로베이스-한달한권 클린코드(Chapter.4)","date":"January 06, 2022"}},"next":{"fields":{"slug":"/CleanCode-2/"}},"previous":{"fields":{"slug":"/CleanCode-4/"}}},{"node":{"id":"4ece670f-acd3-5214-a63d-01f6b9f18d0f","excerpt":"Chapter 3 - 함수 01. SOLID 원칙 S : SRP(Single Responbility Principle) - 단일 책임 원칙 \nO : OCP(Open Close Principle) - 개방-폐쇄 원칙 \nL : LSP(Liskov’s Substitution Principle) - 리스코프 치환 원칙 \nI : ISP(Interface Segregaion Principle) - 인터페이스 분리 원칙 \nD : DIP(Dpendency Inversion Principle) - 의존성 역전 원칙 SRP (Single Responbility Principle) - 단일 책임 원칙 한 클래스는 하나의 책임만 가져야 한다. 클래스는 하나의 기능만 가지며, 어떤 변화에 의해 클래스를 변경 해야 하는 이유는 오직 하나 뿐이어야 한다. SRP 책임이 분명해지기 때문에, 변경에 의한 연쇄작용에서 자유로워질 수 있다. 가독성 향상과 유지보수가 용이해진다. 실전에서는 쉽지 않지만 늘 상기해야 …","fields":{"slug":"/CleanCode-2/"},"frontmatter":{"categories":"CleanCode","title":"제로베이스-한달한권 클린코드(Chapter.3)","date":"January 04, 2022"}},"next":{"fields":{"slug":"/CleanCode-1/"}},"previous":{"fields":{"slug":"/CleanCode-3/"}}},{"node":{"id":"119d0a0b-5239-57f0-b981-a3ad4253299f","excerpt":"- 목표 CleanCode에 대한 전반적인 지식을 쌓는다. CleanCode를 작성하기 위한 방법을 습득한다. 제로베이스 한달한권 강의를 커리큘럼을 특별한 일이 없으면 지키도록한다. - 책을 읽게 된 계기 일하면서 매일 작성하는 내 코드가 프로젝트가 종료되고 나중에 다른 사람이 내 코드를 봤을 때 이해를 잘 하고 유지보수를 잘 할 수 있을까에 대한 의문이 항상 있었다. 클린코드라는 책을 예전부터 알고 있었지만 우선순위를 계속 뒤로 미루던 상황에서 TDD를 먼저 공부하려고 하다가 현재 나에게 시급한거는 깨끗한 코드를 작성하는게 좀 더 우선시 되어야 하겠다고 생각해서 먼저 진행하던 TDD에 대한 기록은 잠시 접어두고 고민하던 중 제로베이스의 한달한권 광고를 보게되어 시작하게 되었다. 이렇게 시작하지 않으면 계속 미뤄질 것 같아서 새해를 기점으로 바로 시작한다. Chapter 1 - 깨끗한 코드 01. 나쁜 코드 성능이 나쁜 코드 불필요한 연산이 들어가서 개선의 여지가 있는 코드 의미가…","fields":{"slug":"/CleanCode-1/"},"frontmatter":{"categories":"CleanCode","title":"제로베이스-한달한권 클린코드(Chapter.1, 2)","date":"January 02, 2022"}},"next":{"fields":{"slug":"/2021-memoir/"}},"previous":{"fields":{"slug":"/CleanCode-2/"}}},{"node":{"id":"619a4d29-9afe-5384-9eac-8b55294e76e4","excerpt":"1. 제 2의 인생을 시작하다 나는 비전공자 개발자이다. 전에는 캐주얼과 여성복 개발을 하는 일을 7년 정도 하였고 코로나와 미래에 대한 전망이 보이지 않아 과감하게 전직을 생각하고 직업을 선택하던 과정에서 시작 한 디지털 마케팅 수업에서 짧게 배웠던 파이썬 수업을 시작으로 개발자로의 진로 선택에 기점이 되었다. 이게 2019년도 말에 있었던 일이다. 그리고 새해가 되서 우연하게 스파르타코딩클럽의 맛보기 미니프로젝트를 만들어 보았는데 꽤 재미있었다. 이게 완전 트리거가 되어 빠른시일에 제대로 된 교육을 받아보고자 찾아본 게 부트캠프였다. 그렇게 시작하여 2월부터 현재까지 10개월이 조금 넘었다. 2. 개발자가 되기 위해 부트캠프에 들어가다. 우선 현재 나는 백엔드 개발자가 되기 위해서 Java, Spring 교육을 위주로 듣고 있다. 하지만 처음 개발을 시작 할 때는 프론트엔드를 지망해서 프론트엔드 교육을 듣고 수료를 하였다. 부트캠프에서는 바닐라JS를 가지고 프레임워크 및 라이브…","fields":{"slug":"/2021-memoir/"},"frontmatter":{"categories":"나의생각","title":"나의 새로운 시작 개발자 - 2021 회고록","date":"January 01, 2022"}},"next":{"fields":{"slug":"/TDD-practice-2-2/"}},"previous":{"fields":{"slug":"/CleanCode-1/"}}},{"node":{"id":"59675925-749f-5a9a-879e-839eb102cc04","excerpt":"github link - TDD_practice Chapter 2 - JUnit과 Hamcrest - 체크리스트  테스트 픽스처의 개념  JUnit 3 단정문 테스트 스위트  JUnit 4 @Test @BeforeClass, @AfterClass, @Before, @After 예외처리 테스트 시간 제한 테스트 @Runwith @SuiteClasses [고급 기능 소개] 파라미터화된 테스트 Rule Theory  Hamcrest 단정문  [어제 내용에 이어서 진행] assertEquals 시리즈 중 모양이 다소 다른 것이 있는데 바로 메소드다. 메소드 인자 마지막에 delta라는 항목이 하나 더 있다. 소수점을 갖는 float나 double 데이터형의 경우에는 정확하게 일치하는 값을 찾기 어려울 수 있다. 그럴 경우 delta라는 오차 보정 값을 이용해 적절한 오차 범위 내의 값은 동일한 값으로 판단할 수 있게 해준다.   예상값와 같은 소수자리를 맞춰주어야 테스트에 성공을 한다. …","fields":{"slug":"/TDD-practice-2-2/"},"frontmatter":{"categories":"TDD JUnit","title":"TDD 실천법과 도구 책을 활용한 TDD익숙해지기 (CHAPTER.2-2)","date":"December 29, 2021"}},"next":{"fields":{"slug":"/TDD-practice-2-1/"}},"previous":{"fields":{"slug":"/2021-memoir/"}}},{"node":{"id":"0c18c684-170c-5da7-ac94-5e0c32270db8","excerpt":"github link - TDD_practice Chapter 2 - JUnit과 Hamcrest - 체크리스트  테스트 픽스처의 개념  JUnit 3 단정문 테스트 스위트  JUnit 4 @Test @BeforeClass, @AfterClass, @Before, @After 예외처리 테스트 시간 제한 테스트 @Runwith @SuiteClasses [고급 기능 소개] 파라미터화된 테스트 Rule Theory  Hamcrest - JUnit 에릭 감마와 켄트 백이 탄생시킨 JUnit은 전 세계적으로 가장 널리 사용되는 Java 단위 테스트 프레임 워크다.\nTDD의 근간이 되는 프레임워크이며, 소위 xUnit 시리즈라고 불리는 다양한 단위 테스트 프레임워크들의 기원이 되는 프레임워크다. - JUnit이 기본적으로 제공하는 기능 테스트 결과가 예상과 같은지를 판별해주는 단정문(assertions) 여러 테스트에서 공용으로 사용할 수 있는 테스트 픽스처(test fixture) 테스트 …","fields":{"slug":"/TDD-practice-2-1/"},"frontmatter":{"categories":"TDD JUnit","title":"TDD 실천법과 도구 책을 활용한 TDD익숙해지기 (CHAPTER.2-1)","date":"December 27, 2021"}},"next":{"fields":{"slug":"/TDD-practice-1/"}},"previous":{"fields":{"slug":"/TDD-practice-2-2/"}}},{"node":{"id":"c77cddcc-f86f-5596-a8f4-20346bf7bf95","excerpt":"github link - TDD_practice Chapter 1 - TDD(Test Driven Development - 테스트 주도 개발) - 목표 TDD에 대한 전반적인 지식을 쌓는다. TDD를 익숙하게 사용하도록 숙달한다. 일주일에 1챕터 이상 진행한다. - 책을 읽게 된 계기 NEXTSETP에서 자바 플레이 그라운드 - 자바 with TDD, 클린코드 수업을 첫 번째 미션을 진행했었는데TDD에 대한 충분한 이해가 부족하다고 판단되었고 보충을 한 뒤 다시 수업을 들어야 겠다고 생각했다. 그래서 수업에 대한 다른 사람들의 질문을 볼 수 있는 SLACK에 가입을 하였고 그 곳에서 어떤 분이 질문 한 곳에서 박재성님의 답변에 절판된 TDD 실천법과 도구 책에 대한 pdf로 공개되어 있는 블로그를 알게되어서 시작하게 되었다. - 작성 방법 책에 대한 내용을 나열하기 보다는 실습 위주의 내용을 복습 차원으로 기록을 할 것이다.\n책에서는 예제를 eclipse IDE 를 활용하였지만 나…","fields":{"slug":"/TDD-practice-1/"},"frontmatter":{"categories":"TDD JUnit","title":"TDD 실천법과 도구 책을 활용한 TDD익숙해지기 (CHAPTER.1)","date":"December 25, 2021"}},"next":{"fields":{"slug":"/spring-boot/"}},"previous":{"fields":{"slug":"/TDD-practice-2-1/"}}},{"node":{"id":"7c71a68e-56ac-5349-8533-3f49223bfd2a","excerpt":"오랜만에 남기는 오늘의 기록\n2주동안 VCMS 화면 퍼블리싱 작업으로 다른 기록은 남기지 못하고 나중에 타임리프 사용 관련해서 정리 해서 글을 남겨봐야겠다 오늘 남길 것은 퍼블리싱 작업이 끝난 후 내가 작업한 작업물을 다른 사람들과 공유해서 볼 수 있게 EC2에 올리는 작업을 해야 했는데 이 부분에서 문제가 생겼다. 나는 퍼블리싱 작업을 처음 하는 거였는데 내가 개발을 하는 입장이라 타임리프 탬플릿을 이용해서 화면 구성을 하였다. 반복되는 부분이 많다보니 fragment로 작업을 많이 하였고 그러다보니 쌩 html파일만 열면 그냥 볼 수가 없었다. 나의 작업물을 본 이사님은 그냥 html, css으로 작업했으면 서버까지 띄울일은 없었을 텐데라며… 하시면서 잘못했다고 하신건 아니지만 내가 듣기엔 내가 잘 못했다 라는 것처럼 들렸다… 그냥 내 느낌이겠지…\n아무튼 이런 사건으로 인해서 내가 작업한 파일을 EC2에서 WAS로 구동하려면 jar가 아닌 war로 배포를 해서 서버에 띄워야 했…","fields":{"slug":"/spring-boot/"},"frontmatter":{"categories":"오늘의기록 SpringBoot","title":"Spring Boot Gradle war 배포","date":"November 13, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-6/"}},"previous":{"fields":{"slug":"/TDD-practice-1/"}}},{"node":{"id":"1cfd61fd-5dd0-5c6e-b110-fda77aded94d","excerpt":"오늘은 이사님이 해보라고 했던 DB관련 업무를 마무리 짓고 내일부터는 프로토타입 화면 개발 하는 업무로 전환한다.\nDB설계 관련 이사님께서 주셨던 미션이 무언가 말끔하게 끝났다고 하기에는 부족한게 많았지만 그래도 흐름을 감잡는데는 도움이 되었던 것 같다.\n테이블을 만들도 쿼리를 작성하는 것은 나중에 또 고생해야 할 것 같지만… 얻은 것은 기록으로! 나는 DB관계를 생각 할 때 JOIN 쿼리가 많으면 성능상에 문제가 많을 거라고 생각했다. 하지만 이사님이 해주신 말은 사용자가 많지 않은 어드민시스템의 경우에는 3개의 테이블을 JOIN해도 성능상에 크게 딜레이가 되지 않는다고 했다. 시간이 좀 지나서 DB에 데이터가 많이 쌓였을 때는 마이그레이션을 고려해봐야 겠지만 현재는 크게 고려해야 할 사항은 아니다. 공통코드나 메뉴테이블의 경우는 한 번 등록하면 바뀌지 않는 테이블이다. 데이터가 계속 저장되는 테이블 같은 경우 어떤 방법으로 최신 데이터를 보여줄 시 고민해야된다. 등등 많은 걸 …","fields":{"slug":"/gatsby-today-record-6/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록 - DB는 패스! 이제는 프로토타입 화면구성 시작","date":"October 27, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-5/"}},"previous":{"fields":{"slug":"/spring-boot/"}}},{"node":{"id":"e8ee1400-22d4-5b11-814b-ecc9f6d9ee8a","excerpt":"오늘은 draw.io를 활용해서 나름대로 ERD를 작성해서 이사님께 검토를 받았다.\n우리 회사가 진행하는 프로그램이 전체 프로젝트 프로그램 규모에 비해 작은 편이라고 하셨지만 내가 시스템의 흐름을 이해하기 위해서 작성한 테이블만 해도 18개… 이사님은 29개가 나왔다고 들었는데 나머지는 어디에서 나오는건지 아직도 모르겠다. 다 정답은 아니겠지만 분명 필요한 테이블이 있을텐데 아직 감을 제대로 잡지 못한것 같다. 내가 작성한 것은 ERD가 아닌 FlowChart였다?! 테이블수가 많아지고 ERD를 Entity, Attribute, Relation으로 각각 표현하는게 힘들것 같아서 나름 조합을 해서 만들어서 보여드렸다.\n 하지만 내가 정리한 이것도 이사님이 보고 이해하시기에는 많이 힘드셨던거 같다. 이렇게 바로 플로우차트로 만들지 말고 와이어프레임을 보고 시나리오로 다시 작성해보라고 하셨다. 사용자 로그인부터 시작해서 각 메뉴 페이지에서 어떤데이터가 오고가는지 한번 정리를 하라고 하셨…","fields":{"slug":"/gatsby-today-record-5/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록 - DB설계 리셋!","date":"October 25, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-4/"}},"previous":{"fields":{"slug":"/gatsby-today-record-6/"}}},{"node":{"id":"b055f292-2b63-504e-b4fe-0613889e399b","excerpt":"DB구조도를 엑셀로 정리를 해보니 내가 생각했을 때 데이터가 어떻게 들어가고 나오는지 보인다고 생각했는데 그게 아니었다.\n다른사람이 보기에는 보기가 힘들었고 생각보다 흐름도 잘 보이지는 않았다.\n더군다나 데이터를 대략적으로라도 보이게끔 한 부분이 사실 더 복잡하게 했던 것 같다. 다시 리셋… 다시 처음부터 다시 시작하기로 했다. 지금까지 정리했던 것을 바탕으로 ERD를 작성할 생각이다. 프로그램은 draw.io를 사용할 것이다. 이사님께서 해주시는 말씀이 하나부터 열까지 틀린게 없고 내가 현재 너무 부족하다고 느끼고 있다. 오늘의 문제점 와이어프레임을 기준으로 데이터가 어떻게 저장이 되고 화면에 어떻게 보여지는지, 어떤 테이블을 만들어서 저장하고 어떤 테이블들을 조합해서 보여줄 것인지 이사님의 질문에 제대로 답변을 하지도 못했다. DB를 다뤄본 경험이 부족하고 프로그램에 대한 이해도가 많이 부족하다는 것을 느꼈다. 이사님께서 DB만 잘 만들어도 개발하기가 훨씬 수월해진다는 말씀을 …","fields":{"slug":"/gatsby-today-record-4/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록 - 나의 구조도는 엉망이었다....","date":"October 20, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-3/"}},"previous":{"fields":{"slug":"/gatsby-today-record-5/"}}},{"node":{"id":"35e71c0f-744d-50ad-9be9-dada7fd91944","excerpt":"오늘은 3차로 수정한 DB테이블 구조도를 확인 받았다.\n하지만 오늘은 이사님이 질문한 답변에 제대로 답변도 못하고 나름 생각해서 작성했다고 한 구조도도 너무 엉망이었고 보기도 힘들었다.\n처음부터 이사님이 얘기하신 부분에 대해서 내가 제대로 생각하지 못한 부분이 많았고 내가 프론트엔드로 시작한 점이 현 시점에서 가장 큰 문제점였다고 생각이 된다.\n큰 그림을 전혀 보지도 못하고 DB를 활용하는 방법도 모르고 다 모르는거 투성이다. 문제가 되었던 부분을 순차적으로 풀어봐야겠다. 1. 와이어프레임 기준으로 화면에 보여줄 데이터에 대한 DB에 정의가 되지 않았다. 내가 테이블 구조도를 작성한 부분이 테이블명부터 각 컬럼, 로우값이 명확하게 정의 되지 않았다. 어떤 부분이 데이터이고 그 데이터가 화면에 어떻게 보여지는 지에 대해서 DB를 보고 판단하기가 힘들었다.(3차 구조도에서 내가 잘 못 작성한 부분이 데이터가 있어야하는 곳에 필드명이 들어가있었고 데이터는 정의하지 않았다. 이사님이 필드…","fields":{"slug":"/gatsby-today-record-3/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록 - DB는 어렵다...","date":"October 19, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-2/"}},"previous":{"fields":{"slug":"/gatsby-today-record-4/"}}},{"node":{"id":"73784969-7f52-503b-981a-16c955c0a2f0","excerpt":"원래 하던 직업을 그만두고 부트캠프를 통해서 프론트엔드를 배웠고 이후 프론트엔드로 취업을 희망하였으나 뜻대로 되지는 않았다.\n그래도 개발을 계속 하고싶었고 좋은 기회라고 생각되서 들어오게 된 회사에서 처음 맡은 프로젝트는 Java를 사용한 VCMS(Video Contents Management System) 프로그램 개발이다.\n백엔드로 시작하는 것이 개발경험이 프론트엔드밖에 없는 나로써는 큰 부담으로 작용했고 부트캠프 당시 DB 및 백엔드에 대해서 교육을 받긴 하였으나 기간이 길지는 않고 개발 프로세스를 이해하는 정도의 경험밖에 없어서 심적 부담이 많이 컸다.\n그래도 이왕 입사해서 시작하였으니 부딪혀보자라는 마음으로 Java기초부터 파견나가기 전까지 내가 준비 할 수 있는 것들을 준비해서 파견까지 나왔고 현재는 DB설계중에 있다.\n우리 회사가 맡은 부분은 영상물 관리를 위해서 만드는 프로그램이다보니 전체 메인시스템과는 연관성이 많지는 않다. 그래서 영상물 관리를 위한 Admin 시…","fields":{"slug":"/gatsby-today-record-2/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록 - DB 설계중","date":"October 17, 2021"}},"next":{"fields":{"slug":"/gatsby-today-record-1/"}},"previous":{"fields":{"slug":"/gatsby-today-record-3/"}}},{"node":{"id":"bd70f2a5-26fe-5c71-858d-3b2609041352","excerpt":"오늘부터 회사에서 배웠던 점이나 내가 기록 해야겠다고 생각 된 부분에 대해서 적어보려고 한다.\n매일 집에와서 강의를 보면서 공부하는 것도 좋지만 회사에서 직접 알게 된 부분이나 현재 내가 배운 부분이 나중에 이곳을 떠나 다른 곳으로 갔을 때 잘된 상황이었는지 비교를 해보고 싶기 때문이다. 1. 테이블 구조도 확인받기 이사님께서 와이어프레임을 보고 DB테이블이 어떻게 나와야 할 지 고민해보라고 하여서 나 나름대로 고민해서 확인을 받았다. 테이블 명세서는 작성하지 않았고 구조도로 필요하다고 생각되는 부분을 작성해서 검토받았는데 이사님이 생각하고 계신거랑 내가 보여드린 결과물이 너무 달랐다. 일단 와이어프레임에 맞춰서 화면에 나와야하는 데이터가 어떤 것인지 구분하라. 처음부터 영문이름으로 작성하기 어려우면 한글로 모두 나열해라. 공통관리가 되는 컬럼들을 따로 그룹해주는 테이블을 만들고 그것을 코드화하는 테이블을 만든다. 최소한 위의 내용이 포함되는 테이블 명세서가 작성되야 하는데 나는 …","fields":{"slug":"/gatsby-today-record-1/"},"frontmatter":{"categories":"오늘의기록","title":"오늘의 기록(SI파견업체)","date":"October 12, 2021"}},"next":{"fields":{"slug":"/gatsby-springMVC-2/"}},"previous":{"fields":{"slug":"/gatsby-today-record-2/"}}},{"node":{"id":"b9f3653b-ac09-50dd-a295-4762100c0b3c","excerpt":"오늘은 회사에서 VCMS 프로토타입 개발 진행을 하게되어서 처음으로 AWS RDS MariaDB에 연동하는 작업을 진행하였다. DB 쿼리 작업을 수월하게 도와주는 Mybatis도 이용하였다. 설정하는 과정 중에 겪었던 문제점을 잊지 않기 위해서 기록한다. 1. DB 연동하기 에서 DB 설정 및 Mybatis 설정을 해준다. 내가 사용에 필요한 부분을 설정해주었다. 2. DB 연동 TEST test를 통해서 db와 연결되는지 확인을 한다. 3. Mybatis 사용을 위한 Entity / Repository class 추가  Member 클래스 레벨에서  어노테이션을 붙여주면, 모든 필드를 대상으로 접근자와 설정자가 자동으로 생성되고,  또는  필드 값을 파라미터로 받는 생성자가 만들어지며, , ,  메소드가 자동으로 만들어진다.  MemberRepository 는 MyBatis의 mappers를 위한 marker interface로 사용 4. Mybatis  설정  가 이전버전에서는…","fields":{"slug":"/gatsby-springMVC-2/"},"frontmatter":{"categories":"SpringMVC","title":"Spring Boot + Mybatis + MariaDB 연결하기","date":"October 06, 2021"}},"next":{"fields":{"slug":"/gatsby-springMVC-1/"}},"previous":{"fields":{"slug":"/gatsby-today-record-1/"}}},{"node":{"id":"18fc7194-db5e-5a2d-9a24-39575c944505","excerpt":"오늘은 인프런의 김영한님 스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술을 마무리하였다. 매일 1~2시간씩 끊어가면서 강의를 듣다보니 배울 때만 기억나고 다시 들을때는 전에 배웠던 내용이 잘 기억나지는 않는다. 시간내서 전체를 다시 한번 들어봐야겠다. 강의 내용 중 마지막 내용인 PRG(Post/Redirect/Get)에 대해서 글을 남긴다. 1. PRG(Post/Redirect/Get) 적용 전 상품을 등록하고 나서 아래의 경로로 이동하게 되었을 때의 문제점은 새로고침을 하게 되면 상품이 지속적으로 등록이 된다는 것이다.  form-post-redirectX.gif gif로 변환을 하다보니 해상도가 좋지는 않은데 상품ID가 새로고침 할 때 마다 올라가는 것을 확인 할 수 있다. 이렇게 마무리가 되면 사용자가 실수로 새로고침을 눌렀을 경우에 똑같은 상품이 계속 저장되게 된다. 그래서 이렇게 저장되지 않도록 해주는 방법이 PRG(Post/Redirect/Get)이다. 2. PRG(…","fields":{"slug":"/gatsby-springMVC-1/"},"frontmatter":{"categories":"SpringMVC","title":"PRG (Post/Redirect/Get)","date":"October 05, 2021"}},"next":{"fields":{"slug":"/gatsby-java-til/"}},"previous":{"fields":{"slug":"/gatsby-springMVC-2/"}}},{"node":{"id":"38adf2af-03e9-56e8-9dca-5466232ff396","excerpt":"VCMS(Video Content Management System) 프로젝트를 진행하게 되어서\n이사님께서 Spring version 4로 만들어 주신 기본폴더를 이용해서 간단하게 추가해 진행을 해보았다. 1. 파일업로드를 위한  설정 fileupload에 필요한 pom.xml에 dependency를 추가하는 작업을 하였습니다.  2. 에  등록 Multipart 지원 기능을 이용하려면 먼저 MultipartResolver를 스프링 설정 파일에 등록해 주어야 합니다 MultipartResolver는 Multipart 형식으로 데이터가 전송된 경우, 해당 데이터를 스프링 MVC에서 사용할 수 있도록 변환해줍니다.  3. 에  적용 이름 타입 필수 설명 fileSizeThreshold int Optional 업로드 파일을 임시로 저장할 때 크기 임계값을 지정합니다. 업로드 파일의 크기가 이 임계값보다 크면 디스크에 저장됩니다. 그렇지 않으면 파일이 메모리에 저장됩니다. 크기(바이트)입니…","fields":{"slug":"/gatsby-java-til/"},"frontmatter":{"categories":"SpringMVC","title":"Spring MVC를 이용한 간단한 파일업로드","date":"September 28, 2021"}},"next":{"fields":{"slug":"/gatsby-first-blog-contents/"}},"previous":{"fields":{"slug":"/gatsby-springMVC-1/"}}},{"node":{"id":"8828faed-e837-5cad-9391-6015d9ebc78a","excerpt":"나의 개인 블로그의 시작 SI로 취업 후 첫 파견을 나와서 기획이 마무리가 안 된 시점에 투입이 되어 특별히 진행되는 것 없이 시간을 보내다가 개인 블로그를 만들어서 TIL이라도 기록해보자!라는 마음으로 검색하던 중 요즘 gatsby로 정적 블로그를 손쉽게 많이들 만드는 것 같아서 줌코딩님의 테마로 도메인도 사서 드디어 첫 글을 게시해 봅니다! 1. Netlify 로그인 먼저 Gatsby 테마로 Github blog를 만드는 것은 줌코딩님께서 자세히 올려놓으셔서 추가로 게시하지는 않습니다.  Github repository를 연결을 먼저 해줘야 한다. Github에 로그인 되어있는 상태에서 Netlify에 들어가서 연동을 해주면 됩니다.  그리고 인스톨 페이지에서 특별하게 건들지 않고 기본 설정으로 진행을 하였습니다. 2. Blog Repository 연결하기  그 다음에 나는 모든 저장소로 연결을 하여서 내 저장소가 전부 다 나오는데 그 중에서 블로그 저장소를 연결해주면 됩니다.…","fields":{"slug":"/gatsby-first-blog-contents/"},"frontmatter":{"categories":"블로그","title":"zoomkoding님 Gatsby 테마로 GitHub Blog 만들고 Netlify로 자동배포하기!","date":"September 27, 2021"}},"next":null,"previous":{"fields":{"slug":"/gatsby-java-til/"}}}],"categories":["All","CleanCode","나의생각","TDD","JUnit","오늘의기록","SpringBoot","SpringMVC","블로그"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}